{"version":3,"file":"influxdb.min.js","sources":["../src/results/chunkCombiner.ts","../src/results/chunksToLines.ts","../src/results/LineSplitter.ts","../src/results/FluxTableColumn.ts","../src/errors.ts","../src/results/FluxTableMetaData.ts","../src/results/linesToTables.ts","../src/options.ts","../src/util/escape.ts","../src/util/currentTime.ts","../src/util/logger.ts","../src/query/flux.ts","../src/observable/symbol.ts","../src/Point.ts","../src/impl/retryStrategy.ts","../src/impl/RetryBuffer.ts","../src/impl/WriteApiImpl.ts","../src/util/utf8Length.ts","../src/impl/browser/FetchTransport.ts","../src/impl/completeCommunicationObserver.ts","../src/impl/QueryApiImpl.ts","../src/results/ObservableQuery.ts","../src/results/AnnotatedCSVResponseImpl.ts","../src/InfluxDB.ts","../src/results/stringToLines.ts"],"sourcesContent":["/**\n * ChunkCombiner is a simplified platform-neutral manipulation of Uint8arrays\n * that allows to process text data on the fly. The implementation can be optimized\n * for the target platform (node vs browser).\n */\nexport interface ChunkCombiner {\n  /**\n   * Concatenates first and second chunk.\n   * @param first - first chunk\n   * @param second - second chunk\n   * @returns first + second\n   */\n  concat(first: Uint8Array, second: Uint8Array): Uint8Array\n\n  /**\n   * Converts chunk into a string.\n   * @param chunk - chunk\n   * @param start - start index\n   * @param end - end index\n   * @returns string representation of chunk slice\n   */\n  toUtf8String(chunk: Uint8Array, start: number, end: number): string\n\n  /**\n   * Creates a new chunk from the supplied chunk.\n   * @param chunk - chunk to copy\n   * @param start - start index\n   * @param end - end index\n   * @returns a copy of a chunk slice\n   */\n  copy(chunk: Uint8Array, start: number, end: number): Uint8Array\n}\n\n// TextDecoder is available since node v8.3.0 and in all modern browsers\ndeclare const TextDecoder: any\n\n/**\n * Creates a chunk combiner instance that uses UTF-8\n * TextDecoder to decode Uint8Arrays into strings.\n */\nexport function createTextDecoderCombiner(): ChunkCombiner {\n  const decoder = new TextDecoder('utf-8')\n  return {\n    concat(first: Uint8Array, second: Uint8Array): Uint8Array {\n      const retVal = new Uint8Array(first.length + second.length)\n      retVal.set(first)\n      retVal.set(second, first.length)\n      return retVal\n    },\n    copy(chunk: Uint8Array, start: number, end: number): Uint8Array {\n      const retVal = new Uint8Array(end - start)\n      retVal.set(chunk.subarray(start, end))\n      return retVal\n    },\n    toUtf8String(chunk: Uint8Array, start: number, end: number): string {\n      return decoder.decode(chunk.subarray(start, end))\n    },\n  }\n}\n","import {ChunkCombiner, createTextDecoderCombiner} from './chunkCombiner'\nimport {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\n\n/**\n * ChunksToLines is a transformation that accepts Uint8Array instances\n * and emmits strings representing CSV lines.\n * @param target - target to emmit CSV lines to\n * @param chunks - chunk combiner\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function chunksToLines(\n  target: CommunicationObserver<string>,\n  chunkCombiner?: ChunkCombiner\n): CommunicationObserver<Uint8Array> {\n  const chunks = chunkCombiner ?? createTextDecoderCombiner()\n  let previous: Uint8Array | undefined\n  let finished = false\n  let quoted = false\n\n  function bufferReceived(chunk: Uint8Array): void {\n    let index: number\n    let start = 0\n    if (previous) {\n      chunk = chunks.concat(previous, chunk)\n      index = (previous as Buffer).length\n    } else {\n      index = 0\n    }\n    while (index < chunk.length) {\n      const c = chunk[index]\n      if (c === 10) {\n        if (!quoted) {\n          /* do not emit CR+LR or LF line ending */\n          const end = index > 0 && chunk[index - 1] === 13 ? index - 1 : index\n          // do not emmit more lines if the processing is already finished\n          if (finished) {\n            return\n          }\n          target.next(chunks.toUtf8String(chunk, start, end))\n          start = index + 1\n        }\n      } else if (c === 34 /* \" */) {\n        quoted = !quoted\n      }\n      index++\n    }\n    if (start < index) {\n      previous = chunks.copy(chunk, start, index)\n    } else {\n      previous = undefined\n    }\n  }\n\n  return {\n    next(chunk: Uint8Array): void {\n      if (finished) return\n      try {\n        bufferReceived(chunk)\n      } catch (e) {\n        this.error(e as Error)\n      }\n    },\n    error(error: Error): void {\n      if (!finished) {\n        finished = true\n        target.error(error)\n      }\n    },\n    complete(): void {\n      if (!finished) {\n        if (previous) {\n          target.next(chunks.toUtf8String(previous, 0, previous.length))\n        }\n        finished = true\n        target.complete()\n      }\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (target.useCancellable) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const self = this\n        target.useCancellable({\n          cancel(): void {\n            cancellable.cancel()\n            previous = undefined // do not emit more lines\n            self.complete()\n          },\n          isCancelled(): boolean {\n            return cancellable.isCancelled()\n          },\n        })\n      }\n    },\n  }\n}\n","/**\n * Optimized tokenizer of a single CSV line.\n */\nexport class LineSplitter {\n  /** returned value when reused  */\n  reusedValues: string[]\n  /** last length of elements in */\n  lastSplitLength: number\n  private _reuse = false\n\n  /**\n   * Reuse returned array between consecutive calls.\n   */\n  get reuse(): boolean {\n    return this._reuse\n  }\n  set reuse(val: boolean) {\n    if (val && !this.reusedValues) {\n      this.reusedValues = new Array(10)\n    }\n    this._reuse = val\n  }\n\n  /**\n   * Sets the reuse flag and returns this.\n   */\n  withReuse(): LineSplitter {\n    this.reuse = true\n    return this\n  }\n\n  /**\n   * Splits the supplied line to elements that are separated by\n   * comma with values possibly escaped within double quotes (\"value\")\n   * @param line - line\n   * @returns array of splitted parts\n   */\n  splitLine(line: string | undefined | null): string[] {\n    if (line === null || line === undefined) {\n      this.lastSplitLength = 0\n      return []\n    }\n    let quoteCount = 0\n    let startIndex = 0\n    const values = this._reuse ? this.reusedValues : []\n    let count = 0\n    for (let i = 0; i < line.length; i++) {\n      const c = line[i]\n      if (c === ',') {\n        if (quoteCount % 2 === 0) {\n          const val = this.getValue(line, startIndex, i, quoteCount)\n          if (this._reuse) {\n            values[count++] = val\n          } else {\n            values.push(val)\n          }\n          startIndex = i + 1\n          quoteCount = 0\n        }\n      } else if (c === '\"') {\n        quoteCount++\n      }\n    }\n    const val = this.getValue(line, startIndex, line.length, quoteCount)\n    if (this._reuse) {\n      values[count] = val\n      this.lastSplitLength = count + 1\n    } else {\n      values.push(val)\n      this.lastSplitLength = values.length\n    }\n\n    return values\n  }\n\n  private getValue(\n    line: string,\n    start: number,\n    end: number,\n    quoteCount: number\n  ): string {\n    if (start === line.length) {\n      return ''\n    } else if (quoteCount === 0) {\n      return line.substring(start, end)\n    } else if (quoteCount === 2) {\n      return line.substring(start + 1, end - 1)\n    } else {\n      // quoteCount >= 4\n      return line.substring(start + 1, end - 1).replace(/\"\"/gi, '\"')\n    }\n  }\n}\n","/**\n * Type of query result column, see {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport type ColumnType =\n  | 'boolean'\n  | 'unsignedLong'\n  | 'long'\n  | 'double'\n  | 'string'\n  | 'base64Binary'\n  | 'dateTime:RFC3339'\n  | 'duration'\n  | string\n\n/**\n * FluxTableColumn describes {@link http://bit.ly/flux-spec#table | flux table} column.\n */\nexport interface FluxTableColumn {\n  /**\n   * Label (e.g., \"_start\", \"_stop\", \"_time\").\n   */\n  label: string\n\n  /**\n   * The data type of column (e.g., \"string\", \"long\", \"dateTime:RFC3339\").\n   */\n  dataType: ColumnType\n\n  /**\n   * Boolean flag indicating if the column is a part of the table's group key.\n   */\n  group: boolean\n\n  /**\n   * Default value to be used for rows whose string value is an empty string.\n   */\n  defaultValue: string\n\n  /**\n   * Index of this column in a row array.\n   */\n  index: number\n\n  /**\n   * Get returns a JavaScript object of this column in the supplied result row, using default deserializers.\n   * @param row - a data row\n   * @returns column value\n   */\n  get: (row: string[]) => any\n}\n\nconst identity = (x: string): any => x\n\n/**\n * A dictionary of serializers of particular types returned by a flux query.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/reference/syntax/annotated-csv/#data-types }\n */\nexport const typeSerializers: Record<ColumnType, (val: string) => any> = {\n  boolean: (x: string): any => x === 'true',\n  unsignedLong: (x: string): any => (x === '' ? null : +x),\n  long: (x: string): any => (x === '' ? null : +x),\n  double(x: string): any {\n    switch (x) {\n      case '':\n        return null\n      case '+Inf':\n        return Number.POSITIVE_INFINITY\n      case '-Inf':\n        return Number.NEGATIVE_INFINITY\n      default:\n        return +x\n    }\n  },\n  string: identity,\n  base64Binary: identity,\n  duration: (x: string): any => (x === '' ? null : x),\n  'dateTime:RFC3339': (x: string): any => (x === '' ? null : x),\n}\n\n/**\n * FluxTableColumn implementation.\n */\nclass FluxTableColumnImpl implements FluxTableColumn {\n  label: string\n  dataType: ColumnType\n  group: boolean\n  defaultValue: string\n  index: number\n  public get(row: string[]): any {\n    let val = row[this.index]\n    if ((val === '' || val === undefined) && this.defaultValue) {\n      val = this.defaultValue\n    }\n    return (typeSerializers[this.dataType] ?? identity)(val)\n  }\n}\nexport const UNKNOWN_COLUMN: FluxTableColumn = Object.freeze({\n  label: '',\n  dataType: '',\n  group: false,\n  defaultValue: '',\n  index: Number.MAX_SAFE_INTEGER,\n  get: () => undefined,\n})\n\n/**\n * Creates a new flux table column.\n * @returns column instance\n */\nexport function newFluxTableColumn(): FluxTableColumn {\n  return new FluxTableColumnImpl()\n}\n\n/**\n * Creates a flux table column from a partial FluxTableColumn.\n * @param object - source object\n * @returns column instance\n */\nexport function createFluxTableColumn(\n  object: Partial<FluxTableColumn>\n): FluxTableColumn {\n  const retVal = new FluxTableColumnImpl()\n  retVal.label = String(object.label)\n  retVal.dataType = object.dataType as ColumnType\n  retVal.group = Boolean(object.group)\n  retVal.defaultValue = object.defaultValue ?? ''\n  retVal.index = object.index ?? 0\n  return retVal\n}\n","/**\n * Strategy for calculating retry delays.\n */\nexport interface RetryDelayStrategy {\n  /**\n   * Returns delay for a next retry\n   * @param error - reason for retrying\n   * @param failedAttempts - a count of already failed attempts, 1 being the first\n   * @returns milliseconds to wait before retrying\n   */\n  nextDelay(error?: Error, failedAttempts?: number): number\n  /** Implementation should reset its state, this is mandatory to call upon success.  */\n  success(): void\n}\n\n/**\n * Interface for errors to inform that an associated operation can be retried.\n */\nexport interface RetriableDecision {\n  /**\n   * Informs whether this can be retried.\n   */\n  canRetry(): boolean\n  /**\n   * Get the delay in milliseconds to retry the action.\n   * @returns 0 to let the implementation decide, miliseconds delay otherwise\n   */\n  retryAfter(): number\n}\n\nconst retriableStatusCodes = [404, 408, 425, 429, 500, 502, 503, 504]\n/** isStatusCodeRetriable checks whether the supplied HTTP status code is retriable. */\nexport function isStatusCodeRetriable(statusCode: number): boolean {\n  return retriableStatusCodes.includes(statusCode)\n}\n\n/** IllegalArgumentError is thrown when illegal argument is supplied. */\nexport class IllegalArgumentError extends Error {\n  /* istanbul ignore next */\n  constructor(message: string) {\n    super(message)\n    this.name = 'IllegalArgumentError'\n    Object.setPrototypeOf(this, IllegalArgumentError.prototype)\n  }\n}\n\n/**\n * A general HTTP error.\n */\nexport class HttpError extends Error implements RetriableDecision {\n  private _retryAfter: number\n  /** application error code, when available */\n  public code: string | undefined\n  /** json error response */\n  public json: any\n\n  /* istanbul ignore next because of super() not being covered*/\n  constructor(\n    readonly statusCode: number,\n    readonly statusMessage: string | undefined,\n    readonly body?: string,\n    retryAfter?: string | undefined | null,\n    readonly contentType?: string | undefined | null,\n    message?: string\n  ) {\n    super()\n    Object.setPrototypeOf(this, HttpError.prototype)\n    if (message) {\n      this.message = message\n    } else if (body) {\n      if (contentType?.startsWith('application/json')) {\n        try {\n          this.json = JSON.parse(body)\n          this.message = this.json.message\n          this.code = this.json.code\n        } catch (e) {\n          // silently ignore, body string is still available\n        }\n      }\n      if (!this.message) {\n        this.message = `${statusCode} ${statusMessage} : ${body}`\n      }\n    } else {\n      this.message = `${statusCode} ${statusMessage}`\n    }\n    this.name = 'HttpError'\n    this.setRetryAfter(retryAfter)\n  }\n\n  private setRetryAfter(retryAfter?: string | undefined | null): void {\n    if (typeof retryAfter === 'string') {\n      // try to parse the supplied number as milliseconds\n      if (/^[0-9]+$/.test(retryAfter)) {\n        this._retryAfter = parseInt(retryAfter)\n      } else {\n        this._retryAfter = 0\n      }\n    } else {\n      this._retryAfter = 0\n    }\n  }\n\n  canRetry(): boolean {\n    return isStatusCodeRetriable(this.statusCode)\n  }\n  retryAfter(): number {\n    return this._retryAfter\n  }\n}\n\n//see https://nodejs.org/api/errors.html\nconst RETRY_CODES = [\n  'ECONNRESET',\n  'ENOTFOUND',\n  'ESOCKETTIMEDOUT',\n  'ETIMEDOUT',\n  'ECONNREFUSED',\n  'EHOSTUNREACH',\n  'EPIPE',\n]\n\n/**\n * Tests the error in order to know if an HTTP call can be retried.\n * @param error - error to test\n * @returns true for a retriable error\n */\nexport function canRetryHttpCall(error: any): boolean {\n  if (!error) {\n    return false\n  } else if (typeof (error as any).canRetry === 'function') {\n    return !!((error as any).canRetry as () => boolean)()\n  } else if ((error as any).code && RETRY_CODES.includes((error as any).code)) {\n    return true\n  }\n  return false\n}\n\n/**\n * Gets retry delay from the supplied error, possibly using random number up to retryJitter.\n */\nexport function getRetryDelay(error?: Error, retryJitter?: number): number {\n  if (!error) {\n    return 0\n  } else {\n    let retVal\n    if (typeof (error as any).retryAfter === 'function') {\n      return ((error as any).retryAfter as () => number)()\n    } else {\n      retVal = 0\n    }\n    if (retryJitter && retryJitter > 0) {\n      return retVal + Math.round(Math.random() * retryJitter)\n    } else {\n      return retVal\n    }\n  }\n}\n\n/** RequestTimedOutError indicates request timeout in the communication with the server */\nexport class RequestTimedOutError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    Object.setPrototypeOf(this, RequestTimedOutError.prototype)\n    this.name = 'RequestTimedOutError'\n    this.message = 'Request timed out'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n\n/** AbortError indicates that the communication with the server was aborted */\nexport class AbortError extends Error implements RetriableDecision {\n  /* istanbul ignore next because of super() not being covered */\n  constructor() {\n    super()\n    this.name = 'AbortError'\n    Object.setPrototypeOf(this, AbortError.prototype)\n    this.message = 'Response aborted'\n  }\n  canRetry(): boolean {\n    return true\n  }\n  retryAfter(): number {\n    return 0\n  }\n}\n","import {\n  FluxTableColumn,\n  UNKNOWN_COLUMN,\n  typeSerializers,\n} from './FluxTableColumn'\nimport {IllegalArgumentError} from '../errors'\n\n/**\n * serializeDateTimeAsDate changes type serializers to return JavaScript Date instances\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsDate(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : new Date(Date.parse(x))\n}\n/**\n * serializeDateTimeAsNumber changes type serializers to return milliseconds since epoch\n * for 'dateTime:RFC3339' query result data type. Empty value is converted to null.\n * @remarks\n * Please note that the result has millisecond precision whereas InfluxDB returns dateTime\n * in nanosecond precision.\n */\nexport function serializeDateTimeAsNumber(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : Date.parse(x)\n}\n/**\n * serializeDateTimeAsString changes type serializers to return string values\n * for `dateTime:RFC3339` query result data type.  Empty value is converted to null.\n */\nexport function serializeDateTimeAsString(): void {\n  typeSerializers['dateTime:RFC3339'] = (x: string): any =>\n    x === '' ? null : x\n}\n\n/**\n * Represents metadata of a {@link http://bit.ly/flux-spec#table | flux table}.\n */\nexport interface FluxTableMetaData {\n  /**\n   * Table columns.\n   */\n  columns: Array<FluxTableColumn>\n\n  /**\n   * Gets columns by name\n   * @param label - column label\n   * @param errorOnMissingColumn - throw error on missing column (by default), return UNKNOWN_COLUMN when false\n   * @returns table column\n   * @throws IllegalArgumentError if column is not found\n   **/\n  column(label: string, errorOnMissingColumn?: boolean): FluxTableColumn\n\n  /**\n   * Creates an object out of the supplied row with the help of column descriptors.\n   * @param row - a row with data for each column\n   */\n  toObject(row: string[]): {[key: string]: any}\n\n  /**\n   * Gets column values out of the supplied row.\n   * @param row - a row with data for each column\n   * @param column - column name\n   * @returns column value, undefined for unknown column\n   */\n  get(row: string[], column: string): any\n}\n\n/**\n * FluxTableMetaData Implementation.\n */\nclass FluxTableMetaDataImpl implements FluxTableMetaData {\n  columns: Array<FluxTableColumn>\n  constructor(columns: FluxTableColumn[]) {\n    columns.forEach((col, i) => (col.index = i))\n    this.columns = columns\n  }\n  column(label: string, errorOnMissingColumn = true): FluxTableColumn {\n    for (let i = 0; i < this.columns.length; i++) {\n      const col = this.columns[i]\n      if (col.label === label) return col\n    }\n    if (errorOnMissingColumn) {\n      throw new IllegalArgumentError(`Column ${label} not found!`)\n    }\n    return UNKNOWN_COLUMN\n  }\n  toObject(row: string[]): {[key: string]: any} {\n    const acc: any = {}\n    for (let i = 0; i < this.columns.length && i < row.length; i++) {\n      const column = this.columns[i]\n      acc[column.label] = column.get(row)\n    }\n    return acc\n  }\n  get(row: string[], column: string): any {\n    return this.column(column, false).get(row)\n  }\n}\n\n/**\n * Created FluxTableMetaData from the columns supplied.\n * @param columns -  columns\n * @returns - instance\n */\nexport function createFluxTableMetaData(\n  columns: FluxTableColumn[]\n): FluxTableMetaData {\n  return new FluxTableMetaDataImpl(columns)\n}\n\n/** Wraps values and associated metadata of a query result row */\nexport interface Row {\n  values: string[]\n  tableMeta: FluxTableMetaData\n}\n","import {CommunicationObserver} from './CommunicationObserver'\nimport {Cancellable} from './Cancellable'\nimport {LineSplitter} from './LineSplitter'\nimport {FluxResultObserver} from './FluxResultObserver'\nimport {\n  FluxTableColumn,\n  ColumnType,\n  newFluxTableColumn,\n} from './FluxTableColumn'\nimport {FluxTableMetaData, createFluxTableMetaData} from './FluxTableMetaData'\n\n/**\n * linesToTables creates a transformationthat accepts (flux) annotated CSV lines\n * and emits rows together with table metadata.\n */\nexport function linesToTables(\n  consumer: FluxResultObserver<string[]>\n): CommunicationObserver<string> {\n  const splitter = new LineSplitter().withReuse()\n  let columns: FluxTableColumn[] | undefined\n  let expectMeta = true\n  let firstColumnIndex = 0\n  let lastMeta: FluxTableMetaData\n  return {\n    error(error: Error): void {\n      consumer.error(error)\n    },\n    next(line: string): void {\n      if (line === '') {\n        expectMeta = true\n        columns = undefined\n      } else {\n        const values = splitter.splitLine(line)\n        const size = splitter.lastSplitLength\n        if (expectMeta) {\n          // create columns\n          if (!columns) {\n            columns = new Array(size)\n            for (let i = 0; i < size; i++) {\n              columns[i] = newFluxTableColumn()\n            }\n          }\n          if (!values[0].startsWith('#')) {\n            // fill in column names\n            if (values[0] === '') {\n              firstColumnIndex = 1\n              columns = columns.slice(1)\n            } else {\n              firstColumnIndex = 0\n            }\n            for (let i = firstColumnIndex; i < size; i++) {\n              columns[i - firstColumnIndex].label = values[i]\n            }\n            lastMeta = createFluxTableMetaData(columns)\n            expectMeta = false\n          } else if (values[0] === '#datatype') {\n            for (let i = 1; i < size; i++) {\n              columns[i].dataType = values[i] as ColumnType\n            }\n          } else if (values[0] === '#default') {\n            for (let i = 1; i < size; i++) {\n              columns[i].defaultValue = values[i]\n            }\n          } else if (values[0] === '#group') {\n            for (let i = 1; i < size; i++) {\n              columns[i].group = values[i][0] === 't'\n            }\n          }\n        } else {\n          consumer.next(values.slice(firstColumnIndex, size), lastMeta)\n        }\n      }\n    },\n    complete(): void {\n      consumer.complete()\n    },\n    useCancellable(cancellable: Cancellable): void {\n      if (consumer.useCancellable) consumer.useCancellable(cancellable)\n    },\n  }\n}\n","import {Transport} from './transport'\nimport WriteApi from './WriteApi'\n\n/**\n * Option for the communication with InfluxDB server.\n */\nexport interface ConnectionOptions {\n  /** base URL */\n  url: string\n  /** authentication token */\n  token?: string\n  /**\n   * socket timeout, 10000 milliseconds by default in node.js\n   * @defaultValue 10000\n   */\n  timeout?: number\n  /**\n   * TransportOptions supply extra options for the transport layer, they differ between node.js and browser/deno.\n   * Node.js transport accepts options specified in {@link https://nodejs.org/api/http.html#http_http_request_options_callback | http.request } or\n   * {@link https://nodejs.org/api/https.html#https_https_request_options_callback | https.request }. For example, an `agent` property can be set to\n   * {@link https://www.npmjs.com/package/proxy-http-agent | setup HTTP/HTTPS proxy }, {@link  https://nodejs.org/api/tls.html#tls_tls_connect_options_callback | rejectUnauthorized }\n   * property can disable TLS server certificate verification. Additionally,\n   * {@link https://github.com/follow-redirects/follow-redirects | follow-redirects } property can be also specified\n   * in order to follow redirects in node.js.\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | fetch } is used under the hood in browser/deno.\n   * For example,\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/fetch | redirect } property can be set to 'error' to abort request if a redirect occurs.\n   */\n  transportOptions?: {[key: string]: any}\n  /**\n   * Default HTTP headers to send with every request.\n   */\n  headers?: Record<string, string>\n  /**\n   * Full HTTP web proxy URL including schema, for example http://your-proxy:8080.\n   */\n  proxyUrl?: string\n}\n\n/** default connection options */\nexport const DEFAULT_ConnectionOptions: Partial<ConnectionOptions> = {\n  timeout: 10000,\n}\n\n/**\n * Options that configure strategy for retrying failed requests.\n */\nexport interface RetryDelayStrategyOptions {\n  /** add `random(retryJitter)` milliseconds delay when retrying HTTP calls */\n  retryJitter: number\n  /** minimum delay when retrying write (milliseconds) */\n  minRetryDelay: number\n  /** maximum delay when retrying write (milliseconds) */\n  maxRetryDelay: number\n  /** base for the exponential retry delay */\n  exponentialBase: number\n  /**\n   * randomRetry indicates whether the next retry delay is deterministic (false) or random (true).\n   * The deterministic delay starts with `minRetryDelay * exponentialBase` and it is multiplied\n   * by `exponentialBase` until it exceeds `maxRetryDelay`.\n   * When random is `true`, the next delay is computed as a random number between next retry attempt (upper)\n   * and the lower number in the deterministic sequence. `random(retryJitter)` is added to every returned value.\n   */\n  randomRetry: boolean\n}\n\n/**\n * Options that configure strategy for retrying failed InfluxDB write operations.\n */\nexport interface WriteRetryOptions extends RetryDelayStrategyOptions {\n  /**\n   * WriteFailed is called to inform about write errors.\n   * @param this - the instance of the API that failed\n   * @param error - write error\n   * @param lines - failed lines\n   * @param attempt - count of already failed attempts to write the lines (1 ... maxRetries+1)\n   * @param expires - expiration time for the lines to be retried in millis since epoch\n   * @returns a Promise to force the API to use it as a result of the flush operation,\n   * void/undefined to continue with default retry mechanism\n   */\n  writeFailed(\n    this: WriteApi,\n    error: Error,\n    lines: Array<string>,\n    attempt: number,\n    expires: number\n  ): Promise<void> | void\n\n  /**\n   * WriteSuccess is informed about successfully written lines.\n   * @param this - the instance of the API in use\n   * @param lines - written lines\n   */\n  writeSuccess(this: WriteApi, lines: Array<string>): void\n\n  /** max count of retries after the first write fails */\n  maxRetries: number\n  /** max time (millis) that can be spent with retries */\n  maxRetryTime: number\n  /** the maximum size of retry-buffer (in lines) */\n  maxBufferLines: number\n}\n\n/**\n * Options used by {@link WriteApi} .\n */\nexport interface WriteOptions extends WriteRetryOptions {\n  /** max number of records/lines to send in a batch   */\n  batchSize: number\n  /** delay between data flushes in milliseconds, at most `batch size` records are sent during flush  */\n  flushInterval: number\n  /** default tags, unescaped */\n  defaultTags?: Record<string, string>\n  /** HTTP headers that will be sent with every write request */\n  headers?: {[key: string]: string}\n  /** When specified, write bodies larger than the threshold are gzipped  */\n  gzipThreshold?: number\n  /** max size of a batch in bytes */\n  maxBatchBytes: number\n}\n\n/** default RetryDelayStrategyOptions */\nexport const DEFAULT_RetryDelayStrategyOptions = {\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 5,\n  randomRetry: true,\n}\n\n/** default writeOptions */\nexport const DEFAULT_WriteOptions: WriteOptions = {\n  batchSize: 1000,\n  maxBatchBytes: 50_000_000, // default max batch size in the cloud\n  flushInterval: 60000,\n  writeFailed: function() {},\n  writeSuccess: function() {},\n  maxRetries: 5,\n  maxRetryTime: 180_000,\n  maxBufferLines: 32_000,\n  // a copy of DEFAULT_RetryDelayStrategyOptions, so that DEFAULT_WriteOptions could be tree-shaken\n  retryJitter: 200,\n  minRetryDelay: 5000,\n  maxRetryDelay: 125000,\n  exponentialBase: 2,\n  gzipThreshold: 1000,\n  randomRetry: true,\n}\n\n/**\n * Options used by {@link InfluxDB} .\n */\nexport interface ClientOptions extends ConnectionOptions {\n  /** supplies and overrides default writing options */\n  writeOptions?: Partial<WriteOptions>\n  /** specifies custom transport */\n  transport?: Transport\n}\n\n/**\n * Timestamp precision used in write operations.\n * See {@link https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostWrite }\n */\nexport type WritePrecisionType = 'ns' | 'us' | 'ms' | 's'\n","function createEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  return function(value: string): string {\n    let retVal = ''\n    let from = 0\n    let i = 0\n    while (i < value.length) {\n      const found = characters.indexOf(value[i])\n      if (found >= 0) {\n        retVal += value.substring(from, i)\n        retVal += replacements[found]\n        from = i + 1\n      }\n      i++\n    }\n    if (from == 0) {\n      return value\n    } else if (from < value.length) {\n      retVal += value.substring(from, value.length)\n    }\n    return retVal\n  }\n}\nfunction createQuotedEscaper(\n  characters: string,\n  replacements: string[]\n): (value: string) => string {\n  const escaper = createEscaper(characters, replacements)\n  return (value: string): string => '\"' + escaper(value) + '\"'\n}\n\n/**\n * Provides functions escape specific parts in InfluxDB line protocol.\n */\nexport const escape = {\n  /**\n   * Measurement escapes measurement names.\n   */\n  measurement: createEscaper(', \\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\n', '\\\\r', '\\\\t']),\n  /**\n   * Quoted escapes quoted values, such as database names.\n   */\n  quoted: createQuotedEscaper('\"\\\\', ['\\\\\"', '\\\\\\\\']),\n\n  /**\n   * TagEscaper escapes tag keys, tag values, and field keys.\n   */\n  tag: createEscaper(', =\\n\\r\\t', ['\\\\,', '\\\\ ', '\\\\=', '\\\\n', '\\\\r', '\\\\t']),\n}\n","declare let process: any\nconst zeroPadding = '000000000'\nlet useHrTime = false\n\nexport function useProcessHrtime(use: boolean): boolean {\n  /* istanbul ignore else */\n  if (!process.env.ROLLUP_BROWSER) {\n    return (useHrTime = use && process && typeof process.hrtime === 'function')\n  } else {\n    return false\n  }\n}\nuseProcessHrtime(true) // preffer node\n\nlet startHrMillis: number | undefined = undefined\nlet startHrTime: [number, number] | undefined = undefined\nlet lastMillis = Date.now()\nlet stepsInMillis = 0\nfunction nanos(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    let millis = Date.now()\n    if (!startHrTime) {\n      startHrTime = hrTime\n      startHrMillis = millis\n    } else {\n      hrTime[0] = hrTime[0] - startHrTime[0]\n      hrTime[1] = hrTime[1] - startHrTime[1]\n      // istanbul ignore next \"cannot mock system clock, manually reviewed\"\n      if (hrTime[1] < 0) {\n        hrTime[0] -= 1\n        hrTime[1] += 1000_000_000\n      }\n      millis =\n        (startHrMillis as number) +\n        hrTime[0] * 1000 +\n        Math.floor(hrTime[1] / 1000_000)\n    }\n    const nanos = String(hrTime[1] % 1000_000)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  } else {\n    const millis = Date.now()\n    if (millis !== lastMillis) {\n      lastMillis = millis\n      stepsInMillis = 0\n    } else {\n      stepsInMillis++\n    }\n    const nanos = String(stepsInMillis)\n    return String(millis) + zeroPadding.substr(0, 6 - nanos.length) + nanos\n  }\n}\n\nfunction micros(): string {\n  if (!process.env.ROLLUP_BROWSER && useHrTime) {\n    const hrTime = process.hrtime() as [number, number]\n    const micros = String(Math.trunc(hrTime[1] / 1000) % 1000)\n    return (\n      String(Date.now()) + zeroPadding.substr(0, 3 - micros.length) + micros\n    )\n  } else {\n    return String(Date.now()) + zeroPadding.substr(0, 3)\n  }\n}\nfunction millis(): string {\n  return String(Date.now())\n}\nfunction seconds(): string {\n  return String(Math.floor(Date.now() / 1000))\n}\n\n/**\n * Exposes functions that creates strings that represent a timestamp that\n * can be used in the line protocol. Micro and nano timestamps are emulated\n * depending on the js platform in use.\n */\nexport const currentTime = {\n  s: seconds as () => string,\n  ms: millis as () => string,\n  us: micros as () => string,\n  ns: nanos as () => string,\n  seconds: seconds as () => string,\n  millis: millis as () => string,\n  micros: micros as () => string,\n  nanos: nanos as () => string,\n}\n\n/**\n * dateToProtocolTimestamp provides converters for JavaScript Date to InfluxDB Write Protocol Timestamp. Keys are supported precisions.\n */\nexport const dateToProtocolTimestamp = {\n  s: (d: Date): string => `${Math.floor(d.getTime() / 1000)}`,\n  ms: (d: Date): string => `${d.getTime()}`,\n  us: (d: Date): string => `${d.getTime()}000`,\n  ns: (d: Date): string => `${d.getTime()}000000`,\n}\n\n/**\n * convertTimeToNanos converts of Point's timestamp to a string\n * @param value - supported timestamp value\n * @returns line protocol value\n */\nexport function convertTimeToNanos(\n  value: string | number | Date | undefined\n): string | undefined {\n  if (value === undefined) {\n    return nanos()\n  } else if (typeof value === 'string') {\n    return value.length > 0 ? value : undefined\n  } else if (value instanceof Date) {\n    return `${value.getTime()}000000`\n  } else if (typeof value === 'number') {\n    return String(Math.floor(value))\n  } else {\n    return String(value)\n  }\n}\n","/**\n * Logging interface.\n */\nexport interface Logger {\n  error(message: string, err?: any): void\n  warn(message: string, err?: any): void\n}\n\n/**\n * Logger that logs to console.out\n */\nexport const consoleLogger: Logger = {\n  error(message, error) {\n    // eslint-disable-next-line no-console\n    console.error('ERROR: ' + message, error ? error : '')\n  },\n  warn(message, error) {\n    // eslint-disable-next-line no-console\n    console.warn('WARN: ' + message, error ? error : '')\n  },\n}\nlet provider: Logger = consoleLogger\n\nexport const Log: Logger = {\n  error(message, error) {\n    provider.error(message, error)\n  },\n  warn(message, error) {\n    provider.warn(message, error)\n  },\n}\n\n/**\n * Sets custom logger.\n * @param logger - logger to use\n * @returns previous logger\n */\nexport function setLogger(logger: Logger): Logger {\n  const previous = provider\n  provider = logger\n  return previous\n}\n","/** Property that offers a function that returns flux-sanitized value of an object.  */\nexport const FLUX_VALUE = Symbol('FLUX_VALUE')\n\n/**\n * A flux parameter can print its (sanitized) flux value.\n */\nexport interface FluxParameterLike {\n  [FLUX_VALUE](): string\n}\n\n/**\n * Represents a parameterized query.\n */\nexport interface ParameterizedQuery {\n  /**\n   * Returns flux query with sanitized parameters.\n   */\n  toString(): string\n}\n\nclass FluxParameter implements FluxParameterLike, ParameterizedQuery {\n  constructor(private fluxValue: string) {}\n  toString(): string {\n    return this.fluxValue\n  }\n  [FLUX_VALUE](): string {\n    return this.fluxValue\n  }\n}\n\n/**\n * Checks if the supplied object is FluxParameterLike\n * @param value - any value\n * @returns true if it is\n */\nfunction isFluxParameterLike(value: any): boolean {\n  return typeof value === 'object' && typeof value[FLUX_VALUE] === 'function'\n}\n\n/**\n * Escapes content of the supplied string so it can be wrapped into double qoutes\n * to become a [flux string literal](https://docs.influxdata.com/flux/v0.65/language/lexical-elements/#string-literals).\n * @param value - string value\n * @returns sanitized string\n */\nfunction sanitizeString(value: any): string {\n  if (value === null || value === undefined) return ''\n  value = value.toString()\n  let retVal: any = undefined\n  let i = 0\n  function prepareRetVal(): void {\n    if (retVal === undefined) {\n      retVal = value.substring(0, i)\n    }\n  }\n  for (; i < value.length; i++) {\n    const c = value.charAt(i)\n    switch (c) {\n      case '\\r':\n        prepareRetVal()\n        retVal += '\\\\r'\n        break\n      case '\\n':\n        prepareRetVal()\n        retVal += '\\\\n'\n        break\n      case '\\t':\n        prepareRetVal()\n        retVal += '\\\\t'\n        break\n      case '\"':\n      case '\\\\':\n        prepareRetVal()\n        retVal = retVal + '\\\\' + c\n        break\n      case '$':\n        // escape ${\n        if (i + 1 < value.length && value.charAt(i + 1) === '{') {\n          prepareRetVal()\n          i++\n          retVal += '\\\\${'\n          break\n        }\n        // append $\n        if (retVal != undefined) {\n          retVal += c\n        }\n        break\n      default:\n        if (retVal != undefined) {\n          retVal += c\n        }\n    }\n  }\n  if (retVal !== undefined) {\n    return retVal\n  }\n  return value\n}\n\n/**\n * Creates a flux string literal.\n */\nexport function fluxString(value: any): FluxParameterLike {\n  return new FluxParameter(`\"${sanitizeString(value)}\"`)\n}\n\n/**\n * Sanitizes float value to avoid injections.\n * @param value - InfluxDB float literal\n * @returns sanitized float value\n * @throws Error if the the value cannot be sanitized\n */\nexport function sanitizeFloat(value: any): string {\n  if (typeof value === 'number') {\n    if (!isFinite(value)) {\n      throw new Error(`not a flux float: ${value}`)\n    }\n    return value.toString()\n  }\n  const val = String(value)\n  let dot = false\n  for (const c of val) {\n    if (c === '.') {\n      if (dot) throw new Error(`not a flux float: ${val}`)\n      dot = !dot\n      continue\n    }\n    if (c !== '.' && c !== '-' && (c < '0' || c > '9'))\n      throw new Error(`not a flux float: ${val}`)\n  }\n  return val\n}\n/**\n * Creates a flux float literal.\n */\nexport function fluxFloat(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeFloat(value))\n}\n\n/**\n * Creates a flux integer literal.\n */\nexport function fluxInteger(value: any): FluxParameterLike {\n  const val = sanitizeFloat(value)\n  for (const c of val) {\n    if (c === '.') {\n      throw new Error(`not a flux integer: ${val}`)\n    }\n  }\n  return new FluxParameter(val)\n}\n\nfunction sanitizeDateTime(value: any): string {\n  return `time(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDateTime(value: any): FluxParameterLike {\n  return new FluxParameter(sanitizeDateTime(value))\n}\n\n/**\n * Creates flux date-time literal.\n */\nexport function fluxDuration(value: any): FluxParameterLike {\n  return new FluxParameter(`duration(v: \"${sanitizeString(value)}\")`)\n}\n\nfunction sanitizeRegExp(value: any): string {\n  return `regexp.compile(v: \"${sanitizeString(value)}\")`\n}\n\n/**\n * Creates flux regexp literal.\n */\nexport function fluxRegExp(value: any): FluxParameterLike {\n  // let the server decide if it can be parsed\n  return new FluxParameter(sanitizeRegExp(value))\n}\n\n/**\n * Creates flux boolean literal.\n */\nexport function fluxBool(value: any): FluxParameterLike {\n  if (value === 'true' || value === 'false') {\n    return new FluxParameter(value)\n  }\n  return new FluxParameter((!!value).toString())\n}\n\n/**\n * Assumes that the supplied value is flux expression or literal that does not need sanitizing.\n *\n * @param value - any value\n * @returns the supplied value as-is\n */\nexport function fluxExpression(value: any): FluxParameterLike {\n  return new FluxParameter(String(value))\n}\n\n/**\n * Escapes content of the supplied parameter so that it can be safely embedded into flux query.\n * @param value - parameter value\n * @returns sanitized flux value or an empty string if it cannot be converted\n */\nexport function toFluxValue(value: any): string {\n  if (value === undefined) {\n    return ''\n  } else if (value === null) {\n    return 'null'\n  } else if (typeof value === 'boolean') {\n    return value.toString()\n  } else if (typeof value === 'string') {\n    return `\"${sanitizeString(value)}\"`\n  } else if (typeof value === 'number') {\n    return sanitizeFloat(value)\n  } else if (typeof value === 'object') {\n    if (typeof value[FLUX_VALUE] === 'function') {\n      return value[FLUX_VALUE]()\n    } else if (value instanceof Date) {\n      return value.toISOString()\n    } else if (value instanceof RegExp) {\n      return sanitizeRegExp(value)\n    } else if (Array.isArray(value)) {\n      return `[${value.map(toFluxValue).join(',')}]`\n    }\n  }\n  // use toString value for unrecognized object, bigint, symbol\n  return toFluxValue(value.toString())\n}\n\n/**\n * Flux is a tagged template that sanitizes supplied parameters\n * to avoid injection attacks in flux.\n */\nexport function flux(\n  strings: TemplateStringsArray,\n  ...values: any\n): ParameterizedQuery {\n  if (strings.length == 1 && values.length === 0) {\n    return fluxExpression(strings[0]) // the simplest case\n  }\n  const parts = new Array<string>(strings.length + values.length)\n  let partIndex = 0\n  for (let i = 0; i < strings.length; i++) {\n    const text = strings[i]\n    parts[partIndex++] = text\n    if (i < values.length) {\n      const val = values[i]\n      let sanitized: string\n      if (\n        text.endsWith('\"') &&\n        i + 1 < strings.length &&\n        strings[i + 1].startsWith('\"')\n      ) {\n        // parameter is wrapped into flux double quotes\n        sanitized = sanitizeString(val)\n      } else {\n        sanitized = toFluxValue(val)\n        if (sanitized === '') {\n          // do not allow to insert empty strings, unless it is FluxParameterLike\n          if (!isFluxParameterLike(val)) {\n            throw new Error(\n              `Unsupported parameter literal '${val}' at index: ${i}, type: ${typeof val}`\n            )\n          }\n        }\n      }\n      parts[partIndex++] = sanitized\n    } else if (i < strings.length - 1) {\n      throw new Error('Too few parameters supplied!')\n    }\n  }\n  // return flux expression so that flux can be embedded into another flux as-is\n  return fluxExpression(parts.join(''))\n}\n","/* Observable interop typing. Taken from https://github.com/ReactiveX/rxjs */\n\n/* Note: This will add Symbol.observable globally for all TypeScript users */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol\n  }\n}\n\n/** Symbol.observable or a string \"\\@\\@observable\". Used for interop */\nexport const symbolObservable = (():\n  | typeof Symbol.observable\n  | '@@observable' =>\n  (typeof Symbol === 'function' && Symbol.observable) || '@@observable')()\n","import {convertTimeToNanos} from './util/currentTime'\nimport {escape} from './util/escape'\n\n/**\n * Settings that control the way of how a {@link Point} is serialized\n * to a protocol line.\n */\nexport interface PointSettings {\n  /** default tags to add to every point */\n  defaultTags?: {[key: string]: string}\n  /** convertTime serializes Point's timestamp to a line protocol value */\n  convertTime?: (\n    value: string | number | Date | undefined\n  ) => string | undefined\n}\n\n/**\n * Point defines values of a single measurement.\n */\nexport class Point {\n  private name: string\n  private tags: {[key: string]: string} = {}\n  /** escaped field values */\n  public fields: {[key: string]: string} = {}\n  private time: string | number | Date | undefined\n\n  /**\n   * Create a new Point with specified a measurement name.\n   *\n   * @param measurementName - the measurement name\n   */\n  constructor(measurementName?: string) {\n    if (measurementName) this.name = measurementName\n  }\n\n  /**\n   * Sets point's measurement.\n   *\n   * @param name - measurement name\n   * @returns this\n   */\n  public measurement(name: string): Point {\n    this.name = name\n    return this\n  }\n\n  /**\n   * Adds a tag. The caller has to ensure that both name and value are not empty\n   * and do not end with backslash.\n   *\n   * @param name - tag name\n   * @param value - tag value\n   * @returns this\n   */\n  public tag(name: string, value: string): Point {\n    this.tags[name] = value\n    return this\n  }\n\n  /**\n   * Adds a boolean field.\n   *\n   * @param field - field name\n   * @param value - field value\n   * @returns this\n   */\n  public booleanField(name: string, value: boolean | any): Point {\n    this.fields[name] = value ? 'T' : 'F'\n    return this\n  }\n\n  /**\n   * Adds an integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN or out of int64 range value is supplied\n   */\n  public intField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseInt(String(value))\n    }\n    if (isNaN(val) || val <= -9223372036854776e3 || val >= 9223372036854776e3) {\n      throw new Error(`invalid integer value for field '${name}': '${value}'!`)\n    }\n    this.fields[name] = `${Math.floor(val)}i`\n    return this\n  }\n\n  /**\n   * Adds an unsigned integer field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN out of range value is supplied\n   */\n  public uintField(name: string, value: number | any): Point {\n    if (typeof value === 'number') {\n      if (isNaN(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n        throw new Error(`uint value for field '${name}' out of range: ${value}`)\n      }\n      this.fields[name] = `${Math.floor(value as number)}u`\n    } else {\n      const strVal = String(value)\n      for (let i = 0; i < strVal.length; i++) {\n        const code = strVal.charCodeAt(i)\n        if (code < 48 || code > 57) {\n          throw new Error(\n            `uint value has an unsupported character at pos ${i}: ${value}`\n          )\n        }\n      }\n      if (\n        strVal.length > 20 ||\n        (strVal.length === 20 &&\n          strVal.localeCompare('18446744073709551615') > 0)\n      ) {\n        throw new Error(\n          `uint value for field '${name}' out of range: ${strVal}`\n        )\n      }\n      this.fields[name] = `${strVal}u`\n    }\n    return this\n  }\n\n  /**\n   * Adds a number field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   * @throws NaN/Infinity/-Infinity is supplied\n   */\n  public floatField(name: string, value: number | any): Point {\n    let val: number\n    if (typeof value === 'number') {\n      val = value\n    } else {\n      val = parseFloat(value)\n    }\n    if (!isFinite(val)) {\n      throw new Error(`invalid float value for field '${name}': ${value}`)\n    }\n\n    this.fields[name] = String(val)\n    return this\n  }\n\n  /**\n   * Adds a string field.\n   *\n   * @param name - field name\n   * @param value - field value\n   * @returns this\n   */\n  public stringField(name: string, value: string | any): Point {\n    if (value !== null && value !== undefined) {\n      if (typeof value !== 'string') value = String(value)\n      this.fields[name] = escape.quoted(value)\n    }\n    return this\n  }\n\n  /**\n   * Sets point timestamp. Timestamp can be specified as a Date (preferred), number, string\n   * or an undefined value. An undefined value instructs to assign a local timestamp using\n   * the client's clock. An empty string can be used to let the server assign\n   * the timestamp. A number value represents time as a count of time units since epoch, the\n   * exact time unit then depends on the {@link InfluxDB.getWriteApi | precision} of the API\n   * that writes the point.\n   *\n   * Beware that the current time in nanoseconds can't precisely fit into a JS number,\n   * which can hold at most 2^53 integer number. Nanosecond precision numbers are thus supplied as\n   * a (base-10) string. An application can also use ES2020 BigInt to represent nanoseconds,\n   * BigInt's `toString()` returns the required high-precision string.\n   *\n   * Note that InfluxDB requires the timestamp to fit into int64 data type.\n   *\n   * @param value - point time\n   * @returns this\n   */\n  public timestamp(value: Date | number | string | undefined): Point {\n    this.time = value\n    return this\n  }\n\n  /**\n   * Creates an InfluxDB protocol line out of this instance.\n   * @param settings - settings control serialization of a point timestamp and can also add default tags,\n   * nanosecond timestamp precision is used when no `settings` or no `settings.convertTime` is supplied.\n   * @returns an InfluxDB protocol line out of this instance\n   */\n  public toLineProtocol(settings?: Partial<PointSettings>): string | undefined {\n    if (!this.name) return undefined\n    let fieldsLine = ''\n    Object.keys(this.fields)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = this.fields[x]\n          if (fieldsLine.length > 0) fieldsLine += ','\n          fieldsLine += `${escape.tag(x)}=${val}`\n        }\n      })\n    if (fieldsLine.length === 0) return undefined // no fields present\n    let tagsLine = ''\n    const tags =\n      settings && settings.defaultTags\n        ? {...settings.defaultTags, ...this.tags}\n        : this.tags\n    Object.keys(tags)\n      .sort()\n      .forEach(x => {\n        if (x) {\n          const val = tags[x]\n          if (val) {\n            tagsLine += ','\n            tagsLine += `${escape.tag(x)}=${escape.tag(val)}`\n          }\n        }\n      })\n    let time = this.time\n    if (settings && settings.convertTime) {\n      time = settings.convertTime(time)\n    } else {\n      time = convertTimeToNanos(time)\n    }\n\n    return `${escape.measurement(this.name)}${tagsLine} ${fieldsLine}${\n      time !== undefined ? ' ' + time : ''\n    }`\n  }\n\n  toString(): string {\n    const line = this.toLineProtocol(undefined)\n    return line ? line : `invalid point: ${JSON.stringify(this, undefined)}`\n  }\n}\n","import {getRetryDelay, RetryDelayStrategy} from '../errors'\nimport {\n  RetryDelayStrategyOptions,\n  DEFAULT_RetryDelayStrategyOptions,\n} from '../options'\n\n/**\n * Applies a variant of exponential backoff with initial and max delay and a random\n * jitter delay. It also respects `retry delay` when specified together with an error.\n */\nexport class RetryStrategyImpl implements RetryDelayStrategy {\n  options: RetryDelayStrategyOptions\n  currentDelay: number | undefined\n\n  constructor(options?: Partial<RetryDelayStrategyOptions>) {\n    this.options = {...DEFAULT_RetryDelayStrategyOptions, ...options}\n    this.success()\n  }\n\n  nextDelay(error?: Error, failedAttempts?: number): number {\n    const delay = getRetryDelay(error)\n    if (delay && delay > 0) {\n      return delay + Math.round(Math.random() * this.options.retryJitter)\n    } else {\n      if (failedAttempts && failedAttempts > 0) {\n        // compute delay\n        if (this.options.randomRetry) {\n          // random delay between deterministic delays\n          let delay = Math.max(this.options.minRetryDelay, 1)\n          let nextDelay = delay * this.options.exponentialBase\n          for (let i = 1; i < failedAttempts; i++) {\n            delay = nextDelay\n            nextDelay = nextDelay * this.options.exponentialBase\n            if (nextDelay >= this.options.maxRetryDelay) {\n              nextDelay = this.options.maxRetryDelay\n              break\n            }\n          }\n          return (\n            delay +\n            Math.round(\n              Math.random() * (nextDelay - delay) +\n                Math.random() * this.options.retryJitter\n            )\n          )\n        }\n        // deterministric delay otherwise\n        let delay = Math.max(this.options.minRetryDelay, 1)\n        for (let i = 1; i < failedAttempts; i++) {\n          delay = delay * this.options.exponentialBase\n          if (delay >= this.options.maxRetryDelay) {\n            delay = this.options.maxRetryDelay\n            break\n          }\n        }\n        return delay + Math.round(Math.random() * this.options.retryJitter)\n      } else if (this.currentDelay) {\n        this.currentDelay = Math.min(\n          Math.max(this.currentDelay * this.options.exponentialBase, 1) +\n            Math.round(Math.random() * this.options.retryJitter),\n          this.options.maxRetryDelay\n        )\n      } else {\n        this.currentDelay =\n          this.options.minRetryDelay +\n          Math.round(Math.random() * this.options.retryJitter)\n      }\n      return this.currentDelay\n    }\n  }\n  success(): void {\n    this.currentDelay = undefined\n  }\n}\n\n/**\n * Creates a new instance of retry strategy.\n * @param options - retry options\n * @returns retry strategy implementation\n */\nexport function createRetryDelayStrategy(\n  options?: Partial<RetryDelayStrategyOptions>\n): RetryDelayStrategy {\n  return new RetryStrategyImpl(options)\n}\n","import {Log} from '../util/logger'\n\n/* interval between successful retries */\nconst RETRY_INTERVAL = 1\n\ninterface RetryItem {\n  lines: string[]\n  retryCount: number\n  expires: number\n  next?: RetryItem\n}\n\n/**\n * Retries lines up to a limit of max buffer size.\n */\nexport default class RetryBuffer {\n  first?: RetryItem\n  last?: RetryItem\n  size = 0\n  nextRetryTime = 0\n  closed = false\n  private _timeoutHandle: any = undefined\n\n  constructor(\n    private maxLines: number,\n    private retryLines: (\n      lines: string[],\n      retryCountdown: number,\n      started: number\n    ) => Promise<void>\n  ) {}\n\n  addLines(\n    lines: string[],\n    retryCount: number,\n    delay: number,\n    expires: number\n  ): void {\n    if (this.closed) return\n    if (!lines.length) return\n    let retryTime = Date.now() + delay\n    if (expires < retryTime) {\n      delay = expires - Date.now()\n      retryTime = expires\n    }\n    if (retryTime > this.nextRetryTime) this.nextRetryTime = retryTime\n    // ensure at most maxLines are in the Buffer\n    if (this.first && this.size + lines.length > this.maxLines) {\n      const origSize = this.size\n      const newSize = origSize * 0.7 // reduce to 70 %\n      do {\n        const newFirst = this.first.next as RetryItem\n        this.size -= this.first.lines.length\n        this.first.next = undefined\n        this.first = newFirst\n        if (!this.first) {\n          this.last = undefined\n        }\n      } while (this.first && this.size + lines.length > newSize)\n      Log.error(\n        `RetryBuffer: ${origSize -\n          this\n            .size} oldest lines removed to keep buffer size under the limit of ${\n          this.maxLines\n        } lines`\n      )\n    }\n    const toAdd: RetryItem = {\n      lines,\n      retryCount,\n      expires,\n    }\n    if (this.last) {\n      this.last.next = toAdd\n      this.last = toAdd\n    } else {\n      this.first = toAdd\n      this.last = toAdd\n      this.scheduleRetry(delay)\n    }\n    this.size += lines.length\n  }\n\n  removeLines(): RetryItem | undefined {\n    if (this.first) {\n      const toRetry = this.first\n      this.first = this.first.next\n      toRetry.next = undefined\n      this.size -= toRetry.lines.length\n      if (!this.first) this.last = undefined\n      return toRetry\n    }\n    return undefined\n  }\n\n  scheduleRetry(delay: number): void {\n    this._timeoutHandle = setTimeout(() => {\n      const toRetry = this.removeLines()\n      if (toRetry) {\n        this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n          .then(() => {\n            // continue with successfull retry\n            this.scheduleRetry(RETRY_INTERVAL)\n          })\n          .catch(_e => {\n            // already logged\n            this.scheduleRetry(this.nextRetryTime - Date.now())\n          })\n      } else {\n        this._timeoutHandle = undefined\n      }\n    }, Math.max(delay, 0))\n  }\n\n  async flush(): Promise<void> {\n    let toRetry\n    while ((toRetry = this.removeLines())) {\n      await this.retryLines(toRetry.lines, toRetry.retryCount, toRetry.expires)\n    }\n  }\n\n  close(): number {\n    if (this._timeoutHandle) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n    this.closed = true\n    return this.size\n  }\n}\n","import WriteApi from '../WriteApi'\nimport {\n  DEFAULT_WriteOptions,\n  WriteOptions,\n  WritePrecisionType,\n} from '../options'\nimport {Transport, SendOptions} from '../transport'\nimport {Headers} from '../results'\nimport {Log} from '../util/logger'\nimport {HttpError, RetryDelayStrategy} from '../errors'\nimport {Point} from '../Point'\nimport {currentTime, dateToProtocolTimestamp} from '../util/currentTime'\nimport {createRetryDelayStrategy} from './retryStrategy'\nimport RetryBuffer from './RetryBuffer'\nimport utf8Length from '../util/utf8Length'\n\nclass WriteBuffer {\n  length = 0\n  bytes = -1\n  lines: string[]\n\n  constructor(\n    private maxChunkRecords: number,\n    private maxBatchBytes: number,\n    private flushFn: (lines: string[]) => Promise<void>,\n    private scheduleSend: () => void\n  ) {\n    this.lines = new Array<string>(maxChunkRecords)\n  }\n\n  add(record: string): void {\n    const size = utf8Length(record)\n    if (this.length === 0) {\n      this.scheduleSend()\n    } else if (this.bytes + size + 1 >= this.maxBatchBytes) {\n      // the new size already exceeds maxBatchBytes, send it\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n    this.lines[this.length] = record\n    this.length++\n    this.bytes += size + 1\n    if (\n      this.length >= this.maxChunkRecords ||\n      this.bytes >= this.maxBatchBytes\n    ) {\n      this.flush().catch(_e => {\n        // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n      })\n    }\n  }\n  flush(): Promise<void> {\n    const lines = this.reset()\n    if (lines.length > 0) {\n      return this.flushFn(lines)\n    } else {\n      return Promise.resolve()\n    }\n  }\n  reset(): string[] {\n    const retVal = this.lines.slice(0, this.length)\n    this.length = 0\n    this.bytes = -1 // lines are joined with \\n\n    return retVal\n  }\n}\n\nexport default class WriteApiImpl implements WriteApi {\n  private writeBuffer: WriteBuffer\n  private closed = false\n  private httpPath: string\n  private writeOptions: WriteOptions\n  private sendOptions: SendOptions\n  private _timeoutHandle: any = undefined\n  private currentTime: () => string\n  private dateToProtocolTimestamp: (d: Date) => string\n\n  retryBuffer: RetryBuffer\n  retryStrategy: RetryDelayStrategy\n\n  constructor(\n    private transport: Transport,\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType,\n    writeOptions?: Partial<WriteOptions>\n  ) {\n    this.httpPath = `/api/v2/write?org=${encodeURIComponent(\n      org\n    )}&bucket=${encodeURIComponent(bucket)}&precision=${precision}`\n    this.writeOptions = {\n      ...DEFAULT_WriteOptions,\n      ...writeOptions,\n    }\n    this.currentTime = currentTime[precision]\n    this.dateToProtocolTimestamp = dateToProtocolTimestamp[precision]\n    if (this.writeOptions.defaultTags) {\n      this.useDefaultTags(this.writeOptions.defaultTags)\n    }\n    this.sendOptions = {\n      method: 'POST',\n      headers: {\n        'content-type': 'text/plain; charset=utf-8',\n        ...writeOptions?.headers,\n      },\n      gzipThreshold: this.writeOptions.gzipThreshold,\n    }\n\n    const scheduleNextSend = (): void => {\n      if (this.writeOptions.flushInterval > 0) {\n        this._clearFlushTimeout()\n        /* istanbul ignore else manually reviewed, hard to reproduce */\n        if (!this.closed) {\n          this._timeoutHandle = setTimeout(\n            () =>\n              this.sendBatch(\n                this.writeBuffer.reset(),\n                this.writeOptions.maxRetries\n              ).catch(_e => {\n                // an error is logged in case of failure, avoid UnhandledPromiseRejectionWarning\n              }),\n            this.writeOptions.flushInterval\n          )\n        }\n      }\n    }\n    // write buffer\n    this.writeBuffer = new WriteBuffer(\n      this.writeOptions.batchSize,\n      this.writeOptions.maxBatchBytes,\n      lines => {\n        this._clearFlushTimeout()\n        return this.sendBatch(lines, this.writeOptions.maxRetries)\n      },\n      scheduleNextSend\n    )\n    this.sendBatch = this.sendBatch.bind(this)\n    // retry buffer\n    this.retryStrategy = createRetryDelayStrategy(this.writeOptions)\n    this.retryBuffer = new RetryBuffer(\n      this.writeOptions.maxBufferLines,\n      this.sendBatch\n    )\n  }\n\n  sendBatch(\n    lines: string[],\n    retryAttempts: number,\n    expires: number = Date.now() + this.writeOptions.maxRetryTime\n  ): Promise<void> {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const self: WriteApiImpl = this\n    const failedAttempts = self.writeOptions.maxRetries + 1 - retryAttempts\n    if (!this.closed && lines.length > 0) {\n      if (expires <= Date.now()) {\n        const error = new Error('Max retry time exceeded.')\n        const onRetry = self.writeOptions.writeFailed.call(\n          self,\n          error,\n          lines,\n          failedAttempts,\n          expires\n        )\n        if (onRetry) {\n          return onRetry\n        }\n        Log.error(\n          `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n          error\n        )\n        return Promise.reject(error)\n      }\n      return new Promise<void>((resolve, reject) => {\n        let responseStatusCode: number | undefined\n        const callbacks = {\n          responseStarted(_headers: Headers, statusCode?: number): void {\n            responseStatusCode = statusCode\n          },\n          error(error: Error): void {\n            // call the writeFailed listener and check if we can retry\n            const onRetry = self.writeOptions.writeFailed.call(\n              self,\n              error,\n              lines,\n              failedAttempts,\n              expires\n            )\n            if (onRetry) {\n              onRetry.then(resolve, reject)\n              return\n            }\n            if (\n              !self.closed &&\n              retryAttempts > 0 &&\n              (!(error instanceof HttpError) ||\n                (error as HttpError).statusCode >= 429)\n            ) {\n              Log.warn(\n                `Write to InfluxDB failed (attempt: ${failedAttempts}).`,\n                error\n              )\n              self.retryBuffer.addLines(\n                lines,\n                retryAttempts - 1,\n                self.retryStrategy.nextDelay(error, failedAttempts),\n                expires\n              )\n              reject(error)\n              return\n            }\n            Log.error(`Write to InfluxDB failed.`, error)\n            reject(error)\n          },\n          complete(): void {\n            // older implementations of transport do not report status code\n            if (responseStatusCode == 204 || responseStatusCode == undefined) {\n              self.writeOptions.writeSuccess.call(self, lines)\n              self.retryStrategy.success()\n              resolve()\n            } else {\n              const message = `204 HTTP response status code expected, but ${responseStatusCode} returned`\n              const error = new HttpError(\n                responseStatusCode,\n                message,\n                undefined,\n                '0'\n              )\n              error.message = message\n              callbacks.error(error)\n            }\n          },\n        }\n        this.transport.send(\n          this.httpPath,\n          lines.join('\\n'),\n          this.sendOptions,\n          callbacks\n        )\n      })\n    } else {\n      return Promise.resolve()\n    }\n  }\n\n  private _clearFlushTimeout(): void {\n    if (this._timeoutHandle !== undefined) {\n      clearTimeout(this._timeoutHandle)\n      this._timeoutHandle = undefined\n    }\n  }\n\n  writeRecord(record: string): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    this.writeBuffer.add(record)\n  }\n  writeRecords(records: ArrayLike<string>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < records.length; i++) {\n      this.writeBuffer.add(records[i])\n    }\n  }\n  writePoint(point: Point): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    const line = point.toLineProtocol(this)\n    if (line) this.writeBuffer.add(line)\n  }\n  writePoints(points: ArrayLike<Point>): void {\n    if (this.closed) {\n      throw new Error('writeApi: already closed!')\n    }\n    for (let i = 0; i < points.length; i++) {\n      const line = points[i].toLineProtocol(this)\n      if (line) this.writeBuffer.add(line)\n    }\n  }\n  async flush(withRetryBuffer?: boolean): Promise<void> {\n    await this.writeBuffer.flush()\n    if (withRetryBuffer) {\n      return await this.retryBuffer.flush()\n    }\n  }\n  close(): Promise<void> {\n    const retVal = this.writeBuffer.flush().finally(() => {\n      const remaining = this.retryBuffer.close()\n      if (remaining) {\n        Log.error(\n          `Retry buffer closed with ${remaining} items that were not written to InfluxDB!`,\n          null\n        )\n      }\n      this.closed = true\n    })\n    return retVal\n  }\n  dispose(): number {\n    this._clearFlushTimeout()\n    this.closed = true\n    return this.retryBuffer.close() + this.writeBuffer.length\n  }\n\n  // PointSettings\n  defaultTags: {[key: string]: string} | undefined\n  useDefaultTags(tags: {[key: string]: string}): WriteApi {\n    this.defaultTags = tags\n    return this\n  }\n  convertTime(value: string | number | Date | undefined): string | undefined {\n    if (value === undefined) {\n      return this.currentTime()\n    } else if (typeof value === 'string') {\n      return value.length > 0 ? value : undefined\n    } else if (value instanceof Date) {\n      return this.dateToProtocolTimestamp(value)\n    } else if (typeof value === 'number') {\n      return String(Math.floor(value))\n    } else {\n      return String(value)\n    }\n  }\n}\n","/**\n * Utf8Length returns an expected length of a string when UTF-8 encoded.\n * @param s - input string\n * @returns expected count of bytes\n */\nexport default function utf8Length(s: string): number {\n  let retVal = s.length\n  // extends the size with code points (https://en.wikipedia.org/wiki/UTF-8#Encoding)\n  for (let i = 0; i < s.length; i++) {\n    const code = s.charCodeAt(i)\n    /* istanbul ignore else - JS does not count with 4-bytes UNICODE characters at the moment */\n    if (code < 0x80) {\n      continue\n    } else if (code >= 0x80 && code <= 0x7ff) {\n      retVal++\n    } else if (code >= 0x800 && code <= 0xffff) {\n      if (code >= 0xd800 && code <= 0xdfff) {\n        // node.js represents unicode characters above 0xffff by two UTF-16 surrogate halves\n        // see https://en.wikipedia.org/wiki/UTF-8#Codepage_layout\n        retVal++\n      } else {\n        retVal += 2\n      }\n    } else {\n      // never happens in node.js 14, the situation can vary in the futures or in deno/browsers\n      retVal += 3\n    }\n  }\n  return retVal\n}\n","import {Transport, SendOptions} from '../../transport'\nimport {ConnectionOptions} from '../../options'\nimport {HttpError} from '../../errors'\nimport completeCommunicationObserver from '../completeCommunicationObserver'\nimport {Log} from '../../util/logger'\nimport {\n  ChunkCombiner,\n  CommunicationObserver,\n  createTextDecoderCombiner,\n  Headers,\n  ResponseStartedFn,\n} from '../../results'\n\nfunction getResponseHeaders(response: Response): Headers {\n  const headers: Headers = {}\n  response.headers.forEach((value: string, key: string) => {\n    const previous = headers[key]\n    if (previous === undefined) {\n      headers[key] = value\n    } else if (Array.isArray(previous)) {\n      previous.push(value)\n    } else {\n      headers[key] = [previous, value]\n    }\n  })\n  return headers\n}\n\n/**\n * Transport layer that use browser fetch.\n */\nexport default class FetchTransport implements Transport {\n  chunkCombiner: ChunkCombiner = createTextDecoderCombiner()\n  private defaultHeaders: {[key: string]: string}\n  private url: string\n  constructor(private connectionOptions: ConnectionOptions) {\n    this.defaultHeaders = {\n      'content-type': 'application/json; charset=utf-8',\n      // 'User-Agent': `influxdb-client-js/${CLIENT_LIB_VERSION}`, // user-agent can hardly be customized https://github.com/influxdata/influxdb-client-js/issues/262\n      ...connectionOptions.headers,\n    }\n    if (this.connectionOptions.token) {\n      this.defaultHeaders['Authorization'] =\n        'Token ' + this.connectionOptions.token\n    }\n    this.url = String(this.connectionOptions.url)\n    if (this.url.endsWith('/')) {\n      this.url = this.url.substring(0, this.url.length - 1)\n    }\n    // https://github.com/influxdata/influxdb-client-js/issues/263\n    // don't allow /api/v2 suffix to avoid future problems\n    if (this.url.endsWith('/api/v2')) {\n      this.url = this.url.substring(0, this.url.length - '/api/v2'.length)\n      Log.warn(\n        `Please remove '/api/v2' context path from InfluxDB base url, using ${this.url} !`\n      )\n    }\n  }\n  send(\n    path: string,\n    body: string,\n    options: SendOptions,\n    callbacks?: Partial<CommunicationObserver<Uint8Array>> | undefined\n  ): void {\n    const observer = completeCommunicationObserver(callbacks)\n    let cancelled = false\n    let signal = (options as any).signal\n    if (callbacks && callbacks.useCancellable) {\n      const controller = new AbortController()\n      if (!signal) {\n        signal = controller.signal\n        options = {...(options as object), ...signal} as SendOptions\n      }\n      callbacks.useCancellable({\n        cancel() {\n          cancelled = true\n          controller.abort()\n        },\n        isCancelled() {\n          return cancelled || signal.aborted\n        },\n      })\n    }\n    this.fetch(path, body, options)\n      .then(async response => {\n        if (callbacks?.responseStarted) {\n          observer.responseStarted(\n            getResponseHeaders(response),\n            response.status\n          )\n        }\n        if (response.status >= 300) {\n          return response\n            .text()\n            .then((text: string) => {\n              if (!text) {\n                const headerError = response.headers.get('x-influxdb-error')\n                if (headerError) {\n                  text = headerError\n                }\n              }\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  text,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n            .catch((e: Error) => {\n              Log.warn('Unable to receive error body', e)\n              observer.error(\n                new HttpError(\n                  response.status,\n                  response.statusText,\n                  undefined,\n                  response.headers.get('retry-after'),\n                  response.headers.get('content-type')\n                )\n              )\n            })\n        } else {\n          if (response.body) {\n            const reader = response.body.getReader()\n            let chunk: ReadableStreamDefaultReadResult<Uint8Array>\n            do {\n              chunk = await reader.read()\n              observer.next(chunk.value)\n            } while (!chunk.done)\n          } else if (response.arrayBuffer) {\n            const buffer = await response.arrayBuffer()\n            observer.next(new Uint8Array(buffer))\n          } else {\n            const text = await response.text()\n            observer.next(new TextEncoder().encode(text))\n          }\n        }\n      })\n      .catch(e => {\n        if (!cancelled) {\n          observer.error(e)\n        }\n      })\n      .finally(() => observer.complete())\n  }\n  async request(\n    path: string,\n    body: any,\n    options: SendOptions,\n    responseStarted?: ResponseStartedFn\n  ): Promise<any> {\n    const response = await this.fetch(path, body, options)\n    const {status, headers} = response\n    const responseContentType = headers.get('content-type') || ''\n    if (responseStarted) {\n      responseStarted(getResponseHeaders(response), response.status)\n    }\n\n    if (status >= 300) {\n      let data = await response.text()\n      if (!data) {\n        const headerError = headers.get('x-influxdb-error')\n        if (headerError) {\n          data = headerError\n        }\n      }\n      throw new HttpError(\n        status,\n        response.statusText,\n        data,\n        response.headers.get('retry-after'),\n        response.headers.get('content-type')\n      )\n    }\n    const responseType = options.headers?.accept ?? responseContentType\n    if (responseType.includes('json')) {\n      return await response.json()\n    } else if (\n      responseType.includes('text') ||\n      responseType.startsWith('application/csv')\n    ) {\n      return await response.text()\n    }\n  }\n\n  private fetch(\n    path: string,\n    body: any,\n    options: SendOptions\n  ): Promise<Response> {\n    const {method, headers, ...other} = options\n    const url = `${this.url}${path}`\n    const request: RequestInit = {\n      method: method,\n      body:\n        method === 'GET' || method === 'HEAD'\n          ? undefined\n          : typeof body === 'string'\n          ? body\n          : JSON.stringify(body),\n      headers: {\n        ...this.defaultHeaders,\n        ...headers,\n      },\n      credentials: 'omit' as 'omit',\n      // allow to specify custom options, such as signal, in SendOptions\n      ...other,\n    }\n    this.requestDecorator(request, options, url)\n    return fetch(url, request)\n  }\n\n  /**\n   * RequestDecorator allows to modify requests before sending.\n   *\n   * The following example shows a function that adds gzip\n   * compression of requests using pako.js.\n   *\n   * ```ts\n   * const client = new InfluxDB({url: 'http://a'})\n   * client.transport.requestDecorator = function(request, options) {\n   *   const body = request.body\n   *   if (\n   *     typeof body === 'string' &&\n   *     options.gzipThreshold !== undefined &&\n   *     body.length > options.gzipThreshold\n   *   ) {\n   *     request.headers['content-encoding'] = 'gzip'\n   *     request.body = pako.gzip(body)\n   *   }\n   * }\n   * ```\n   */\n  public requestDecorator: (\n    request: RequestInit,\n    options: SendOptions,\n    url: string\n  ) => void = function() {}\n}\n","import {CommunicationObserver, Headers} from '../results'\n\nexport default function completeCommunicationObserver(\n  callbacks: Partial<CommunicationObserver<any>> = {}\n): Omit<Required<CommunicationObserver<any>>, 'useCancellable'> {\n  let state = 0\n  const retVal = {\n    next: (data: any): void => {\n      if (\n        state === 0 &&\n        callbacks.next &&\n        data !== null &&\n        data !== undefined\n      ) {\n        callbacks.next(data)\n      }\n    },\n    error: (error: Error): void => {\n      /* istanbul ignore else propagate error at most once */\n      if (state === 0) {\n        state = 1\n        /* istanbul ignore else safety check */\n        if (callbacks.error) callbacks.error(error)\n      }\n    },\n    complete: (): void => {\n      if (state === 0) {\n        state = 2\n        /* istanbul ignore else safety check */\n        if (callbacks.complete) callbacks.complete()\n      }\n    },\n    responseStarted: (headers: Headers, statusCode?: number): void => {\n      if (callbacks.responseStarted)\n        callbacks.responseStarted(headers, statusCode)\n    },\n  }\n  return retVal\n}\n","import {Observable} from '../observable'\nimport QueryApi, {QueryOptions} from '../QueryApi'\nimport {Transport} from '../transport'\nimport {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  AnnotatedCSVResponse,\n} from '../results'\nimport {ParameterizedQuery} from '../query/flux'\nimport {APIExecutor} from '../results/ObservableQuery'\n\nconst DEFAULT_dialect: any = {\n  header: true,\n  delimiter: ',',\n  quoteChar: '\"',\n  commentPrefix: '#',\n  annotations: ['datatype', 'group', 'default'],\n}\n\nexport class QueryApiImpl implements QueryApi {\n  private options: QueryOptions\n  constructor(\n    private transport: Transport,\n    private createCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse,\n    org: string | QueryOptions\n  ) {\n    this.options = typeof org === 'string' ? {org} : org\n  }\n\n  with(options: Partial<QueryOptions>): QueryApi {\n    return new QueryApiImpl(this.transport, this.createCSVResponse, {\n      ...this.options,\n      ...options,\n    })\n  }\n\n  response(query: string | ParameterizedQuery): AnnotatedCSVResponse {\n    return this.createCSVResponse(this.createExecutor(query))\n  }\n\n  lines(query: string | ParameterizedQuery): Observable<string> {\n    return this.response(query).lines()\n  }\n\n  rows(query: string | ParameterizedQuery): Observable<Row> {\n    return this.response(query).rows()\n  }\n\n  queryLines(\n    query: string | ParameterizedQuery,\n    consumer: CommunicationObserver<string>\n  ): void {\n    return this.response(query).consumeLines(consumer)\n  }\n\n  queryRows(\n    query: string | ParameterizedQuery,\n    consumer: FluxResultObserver<string[]>\n  ): void {\n    return this.response(query).consumeRows(consumer)\n  }\n\n  collectRows<T>(\n    query: string | ParameterizedQuery,\n    rowMapper?: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    return this.response(query).collectRows(rowMapper)\n  }\n\n  collectLines(query: string | ParameterizedQuery): Promise<Array<string>> {\n    return this.response(query).collectLines()\n  }\n\n  queryRaw(query: string | ParameterizedQuery): Promise<string> {\n    const {org, type, gzip, headers} = this.options\n    return this.transport.request(\n      `/api/v2/query?org=${encodeURIComponent(org)}`,\n      JSON.stringify(\n        this.decorateRequest({\n          query: query.toString(),\n          dialect: DEFAULT_dialect,\n          type,\n        })\n      ),\n      {\n        method: 'POST',\n        headers: {\n          accept: 'text/csv',\n          'accept-encoding': gzip ? 'gzip' : 'identity',\n          'content-type': 'application/json; encoding=utf-8',\n          ...headers,\n        },\n      }\n    )\n  }\n\n  private createExecutor(query: string | ParameterizedQuery): APIExecutor {\n    const {org, type, gzip, headers} = this.options\n\n    return (consumer): void => {\n      this.transport.send(\n        `/api/v2/query?org=${encodeURIComponent(org)}`,\n        JSON.stringify(\n          this.decorateRequest({\n            query: query.toString(),\n            dialect: DEFAULT_dialect,\n            type,\n          })\n        ),\n        {\n          method: 'POST',\n          headers: {\n            'content-type': 'application/json; encoding=utf-8',\n            'accept-encoding': gzip ? 'gzip' : 'identity',\n            ...headers,\n          },\n        },\n        consumer\n      )\n    }\n  }\n  private decorateRequest(request: any): any {\n    if (typeof this.options.now === 'function') {\n      request.now = this.options.now()\n    }\n    // https://docs.influxdata.com/influxdb/v2.1/api/#operation/PostQuery requires type\n    request.type = this.options.type ?? 'flux'\n    return request\n  }\n}\n\nexport default QueryApiImpl\n","import {\n  Observable,\n  Observer,\n  ObserverComplete,\n  ObserverError,\n  ObserverNext,\n  Subscription,\n  symbolObservable,\n} from '../observable'\nimport {CommunicationObserver} from '../results/CommunicationObserver'\nimport {Cancellable} from '../results/Cancellable'\n\n/** APIExecutor executes the API and passes its response to the supplied consumer */\nexport type APIExecutor = (consumer: CommunicationObserver<Uint8Array>) => void\n\ntype Decorator<T> = (observer: Observer<T>) => Observer<Uint8Array>\n\nclass QuerySubscription implements Subscription {\n  private cancellable?: Cancellable\n  private isClosed = false\n\n  public constructor(observer: Observer<Uint8Array>, executor: APIExecutor) {\n    try {\n      executor({\n        next: value => {\n          observer.next(value)\n        },\n        error: e => {\n          this.isClosed = true\n          observer.error(e)\n        },\n        complete: () => {\n          this.isClosed = true\n          observer.complete()\n        },\n        useCancellable: c => {\n          this.cancellable = c\n        },\n      })\n    } catch (e) {\n      this.isClosed = true\n      observer.error(e)\n    }\n  }\n\n  public get closed(): boolean {\n    return this.isClosed\n  }\n\n  public unsubscribe(): void {\n    this.cancellable?.cancel()\n    this.isClosed = true\n  }\n}\n\nfunction noop(): void {}\n\nfunction completeObserver<T>(observer: Partial<Observer<T>>): Observer<T> {\n  const {next, error, complete} = observer\n\n  return {\n    next: next ? next.bind(observer) : noop,\n    error: error ? error.bind(observer) : noop,\n    complete: complete ? complete.bind(observer) : noop,\n  }\n}\n\nexport default class ObservableQuery<T> implements Observable<T> {\n  public constructor(\n    private readonly executor: APIExecutor,\n    private readonly decorator: Decorator<T>\n  ) {}\n\n  public subscribe(\n    observerOrNext?: Partial<Observer<T>> | ObserverNext<T>,\n    error?: ObserverError,\n    complete?: ObserverComplete\n  ): Subscription {\n    const observer = completeObserver(\n      typeof observerOrNext !== 'object' || observerOrNext === null\n        ? {next: observerOrNext, error, complete}\n        : observerOrNext\n    )\n\n    return new QuerySubscription(this.decorator(observer), this.executor)\n  }\n\n  public [symbolObservable](): this {\n    return this\n  }\n\n  // this makes sure we satisfy the interface, while using a possibly polyfilled\n  // [symbolObservable] above for the actual implementation\n  public declare [Symbol.observable]: () => this\n}\n","import {\n  CommunicationObserver,\n  FluxResultObserver,\n  FluxTableMetaData,\n  Row,\n  linesToTables,\n  ChunkCombiner,\n  chunksToLines,\n} from '../results'\nimport {Observable} from '../observable'\nimport {AnnotatedCSVResponse} from './AnnotatedCSVResponse'\nimport ObservableQuery, {APIExecutor} from './ObservableQuery'\n\nexport function defaultRowMapping(\n  values: string[],\n  tableMeta: FluxTableMetaData\n): Record<string, any> {\n  return tableMeta.toObject(values)\n}\n\n/**\n * AnnotatedCsvResponseImpl is an implementation AnnotatedCsvResponse\n * that uses the supplied executor to supply a response data stream.\n */\nexport class AnnotatedCSVResponseImpl implements AnnotatedCSVResponse {\n  constructor(\n    private executor: APIExecutor,\n    private chunkCombiner: ChunkCombiner\n  ) {}\n  lines(): Observable<string> {\n    return new ObservableQuery(this.executor, observer =>\n      chunksToLines(observer, this.chunkCombiner)\n    )\n  }\n\n  rows(): Observable<Row> {\n    return new ObservableQuery(this.executor, observer => {\n      return chunksToLines(\n        linesToTables({\n          next(values, tableMeta) {\n            observer.next({values, tableMeta})\n          },\n          error(e) {\n            observer.error(e)\n          },\n          complete() {\n            observer.complete()\n          },\n        }),\n        this.chunkCombiner\n      )\n    })\n  }\n\n  consumeLines(consumer: CommunicationObserver<string>): void {\n    this.executor(chunksToLines(consumer, this.chunkCombiner))\n  }\n\n  consumeRows(consumer: FluxResultObserver<string[]>): void {\n    this.executor(chunksToLines(linesToTables(consumer), this.chunkCombiner))\n  }\n\n  collectRows<T>(\n    rowMapper: (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined = defaultRowMapping as (\n      values: string[],\n      tableMeta: FluxTableMetaData\n    ) => T | undefined\n  ): Promise<Array<T>> {\n    const retVal: Array<T> = []\n    return new Promise((resolve, reject) => {\n      this.consumeRows({\n        next(values: string[], tableMeta: FluxTableMetaData): void {\n          const toAdd = rowMapper.call(this, values, tableMeta)\n          if (toAdd !== undefined) {\n            retVal.push(toAdd)\n          }\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n\n  collectLines(): Promise<Array<string>> {\n    const retVal: Array<string> = []\n    return new Promise((resolve, reject) => {\n      this.consumeLines({\n        next(line: string): void {\n          retVal.push(line)\n        },\n        error(error: Error): void {\n          reject(error)\n        },\n        complete(): void {\n          resolve(retVal)\n        },\n      })\n    })\n  }\n}\n","import WriteApi from './WriteApi'\nimport {ClientOptions, WriteOptions, WritePrecisionType} from './options'\nimport WriteApiImpl from './impl/WriteApiImpl'\nimport {IllegalArgumentError} from './errors'\nimport {Transport} from './transport'\n// replaced by ./impl/browser/FetchTransport in browser builds\nimport TransportImpl from './impl/node/NodeHttpTransport'\nimport QueryApi, {QueryOptions} from './QueryApi'\nimport QueryApiImpl from './impl/QueryApiImpl'\nimport {AnnotatedCSVResponse, APIExecutor} from './results'\nimport {AnnotatedCSVResponseImpl} from './results/AnnotatedCSVResponseImpl'\n\n/**\n * InfluxDB entry point that configures communication with InfluxDB server\n * and provide APIs to write and query data.\n */\nexport default class InfluxDB {\n  private _options: ClientOptions\n  readonly transport: Transport\n  readonly processCSVResponse: (executor: APIExecutor) => AnnotatedCSVResponse\n\n  /**\n   * Creates influxdb client options from an options object or url.\n   * @param options - client options\n   */\n  constructor(options: ClientOptions | string) {\n    if (typeof options === 'string') {\n      this._options = {url: options}\n    } else if (options !== null && typeof options === 'object') {\n      this._options = options\n    } else {\n      throw new IllegalArgumentError('No url or configuration specified!')\n    }\n    const url = this._options.url\n    if (typeof url !== 'string')\n      throw new IllegalArgumentError('No url specified!')\n    if (url.endsWith('/')) this._options.url = url.substring(0, url.length - 1)\n    this.transport = this._options.transport ?? new TransportImpl(this._options)\n    this.processCSVResponse = (executor: APIExecutor): AnnotatedCSVResponse =>\n      new AnnotatedCSVResponseImpl(executor, this.transport.chunkCombiner)\n  }\n\n  /**\n   * Creates WriteApi for the supplied organization and bucket. BEWARE that returned instances must be closed\n   * in order to flush the remaining data and close already scheduled retry executions.\n   *\n   * @remarks\n   * Inspect the {@link WriteOptions} to control also advanced options, such retries of failure, retry strategy options, data chunking\n   * and flushing windows. See {@link DEFAULT_WriteOptions} to see the defaults.\n   *\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/write.js | write.js example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/writeAdvanced.js | writeAdvanced.js example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example}.\n   *\n   * @param org - Specifies the destination organization for writes. Takes either the ID or Name interchangeably.\n   * @param bucket - The destination bucket for writes.\n   * @param precision - Timestamp precision for line items.\n   * @param writeOptions - Custom write options.\n   * @returns WriteApi instance\n   */\n  getWriteApi(\n    org: string,\n    bucket: string,\n    precision: WritePrecisionType = 'ns',\n    writeOptions?: Partial<WriteOptions>\n  ): WriteApi {\n    return new WriteApiImpl(\n      this.transport,\n      org,\n      bucket,\n      precision,\n      writeOptions ?? this._options.writeOptions\n    )\n  }\n\n  /**\n   * Creates QueryApi for the supplied organization .\n   *\n   * @remarks\n   * See also {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/query.ts | query.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/queryWithParams.ts | queryWithParams.ts example},\n   * {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/rxjs-query.ts | rxjs-query.ts example},\n   * and {@link https://github.com/influxdata/influxdb-client-js/blob/master/examples/index.html | browser example},\n   *\n   * @param org - organization or query options\n   * @returns QueryApi instance\n   */\n  getQueryApi(org: string | QueryOptions): QueryApi {\n    return new QueryApiImpl(this.transport, this.processCSVResponse, org)\n  }\n}\n","import {CommunicationObserver} from './CommunicationObserver'\n\n/**\n * StringToLines is a transformation that emmits strings for each CSV\n * line in the supplied source string.\n * @param source - source string\n * @param target - target to emmit CSV lines to\n * @returns communication obrver to accept Uint8Arrays\n */\nexport function stringToLines(\n  source: string,\n  target: CommunicationObserver<string>\n): void {\n  let quoted = false\n  let start = 0\n  let index = 0\n\n  while (index < source.length) {\n    const c = source.charCodeAt(index)\n    if (c === 10) {\n      if (!quoted) {\n        /* do not emit CR+LR or LF line ending */\n        const end =\n          index > 0 && source.charCodeAt(index - 1) === 13 ? index - 1 : index\n        // do not emmit more lines if the processing is already finished\n        target.next(source.substring(start, end))\n        start = index + 1\n      }\n    } else if (c === 34 /* \" */) {\n      quoted = !quoted\n    }\n    index++\n  }\n  if (start < index) {\n    target.next(source.substring(start, index))\n  }\n  target.complete()\n}\n"],"names":["createTextDecoderCombiner","decoder","TextDecoder","concat","first","second","retVal","Uint8Array","length","set","copy","chunk","start","end","subarray","toUtf8String","decode","chunksToLines","target","chunkCombiner","previous","chunks","finished","quoted","next","index","c","undefined","bufferReceived","e","this","error","complete","useCancellable","cancellable","self_1","cancel","isCancelled","Object","LineSplitter","_reuse","val","reusedValues","Array","reuse","line","lastSplitLength","quoteCount","startIndex","values","count","i","val_1","getValue","push","substring","replace","identity","x","typeSerializers","boolean","unsignedLong","long","double","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","string","base64Binary","duration","dateTime:RFC3339","FluxTableColumnImpl","row","defaultValue","dataType","UNKNOWN_COLUMN","freeze","label","group","MAX_SAFE_INTEGER","get","newFluxTableColumn","retriableStatusCodes","isStatusCodeRetriable","statusCode","includes","message","_super","_this","name","setPrototypeOf","IllegalArgumentError","prototype","__extends","Error","statusMessage","body","retryAfter","contentType","HttpError","startsWith","json","JSON","parse","code","setRetryAfter","test","_retryAfter","parseInt","RETRY_CODES","getRetryDelay","retryJitter","Math","round","random","RequestTimedOutError","AbortError","columns","forEach","col","FluxTableMetaDataImpl","errorOnMissingColumn","acc","column","createFluxTableMetaData","linesToTables","consumer","lastMeta","splitter","withReuse","expectMeta","firstColumnIndex","splitLine","size","slice","DEFAULT_RetryDelayStrategyOptions","minRetryDelay","maxRetryDelay","exponentialBase","randomRetry","DEFAULT_WriteOptions","batchSize","maxBatchBytes","flushInterval","writeFailed","writeSuccess","maxRetries","maxRetryTime","maxBufferLines","gzipThreshold","createEscaper","characters","replacements","value","from","found","indexOf","escaper","escape","measurement","tag","lastMillis","Date","now","stepsInMillis","nanos","millis_2","nanos_2","String","substr","micros","millis","seconds","floor","currentTime","s","ms","us","ns","dateToProtocolTimestamp","d","getTime","convertTimeToNanos","consoleLogger","console","warn","provider","Log","FLUX_VALUE","Symbol","fluxValue","FluxParameter","isFluxParameterLike","sanitizeString","toString","prepareRetVal","charAt","sanitizeFloat","isFinite","dot","_i","sanitizeRegExp","fluxExpression","toFluxValue","toISOString","RegExp","isArray","map","join","symbolObservable","observable","measurementName","Point","tags","fields","isNaN","strVal","charCodeAt","localeCompare","parseFloat","time","settings","fieldsLine","keys","sort","tagsLine","defaultTags","convertTime","toLineProtocol","stringify","options","success","RetryStrategyImpl","failedAttempts","delay","delay_1","max","nextDelay","delay_2","currentDelay","min","maxLines","retryLines","RetryBuffer","lines","retryCount","expires","closed","retryTime","nextRetryTime","origSize","newSize","newFirst","last","toAdd","scheduleRetry","toRetry","_timeoutHandle","setTimeout","removeLines","then","catch","_e","_a","clearTimeout","maxChunkRecords","flushFn","scheduleSend","WriteBuffer","record","utf8Length","bytes","flush","reset","Promise","resolve","transport","org","bucket","precision","writeOptions","httpPath","encodeURIComponent","useDefaultTags","sendOptions","method","headers","content-type","writeBuffer","_clearFlushTimeout","sendBatch","bind","retryStrategy","retryBuffer","WriteApiImpl","retryAttempts","self","onRetry","call","reject","responseStatusCode","callbacks","responseStarted","_headers","addLines","send","add","records","point","points","withRetryBuffer","finally","remaining","close","getResponseHeaders","response","key","connectionOptions","defaultHeaders","token","url","endsWith","FetchTransport","path","observer","state","data","completeCommunicationObserver","cancelled","signal","controller_1","AbortController","__assign","abort","aborted","fetch","status","text","headerError","statusText","reader","getReader","read","done","arrayBuffer","buffer","TextEncoder","encode","_c","responseContentType","responseType","accept","other","request","credentials","requestDecorator","DEFAULT_dialect","header","delimiter","quoteChar","commentPrefix","annotations","createCSVResponse","QueryApiImpl","query","createExecutor","rows","consumeLines","consumeRows","rowMapper","collectRows","collectLines","type","gzip","decorateRequest","dialect","accept-encoding","executor","isClosed","QuerySubscription","noop","decorator","ObservableQuery","observerOrNext","completeObserver","defaultRowMapping","tableMeta","toObject","AnnotatedCSVResponseImpl","_options","TransportImpl","processCSVResponse","InfluxDB","timeout","canRetry","object","Boolean","strings","parts","partIndex","sanitized","sanitizeDateTime","val_2","logger","source","use"],"mappings":"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"}